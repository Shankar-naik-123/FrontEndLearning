{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PostsComponent = class PostsComponent {\n  /*In below example we are using angular service post.service.ts to get our postlists. so we have\n  implemented angular service but this is not the right way to do that.below are directly creating class object\n  by using new keyword this created tight coupling with angular service. instead of this way we have to perform dependency\n  injestion to overcome this tight coupling */\n  /*constructor()\n  {\n   let p=new PostService();\n   this.posts=p.PostList;\n  }*/\n  //using depency injestion\n  constructor(p) {\n    this.posts = [];\n  }\n};\nPostsComponent = __decorate([Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css']\n})], PostsComponent);\nexport { PostsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzB;;;;EAKA;;;;;EAMA;EACAC,YAAYC,CAAY;IAdxB,UAAK,GAAY,EAAE;EAiBnB;CAED;AApBYF,cAAc,eAL1BD,SAAS,CAAC;EACTI,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWL,cAAc,CAoB1B;SApBYA,cAAc","names":["Component","PostsComponent","constructor","p","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/aahz/Angular/octacademyAngularCourse/src/app/posts/posts.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { PostService } from '../Services/post.service';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css']\n})\nexport class PostsComponent {\n  posts:Array<any>=[];\n  \n  /*In below example we are using angular service post.service.ts to get our postlists. so we have \n  implemented angular service but this is not the right way to do that.below are directly creating class object \n  by using new keyword this created tight coupling with angular service. instead of this way we have to perform dependency\n  injestion to overcome this tight coupling */\n  \n  /*constructor()\n  {\n   let p=new PostService();\n   this.posts=p.PostList;\n  }*/\n\n  //using depency injestion\n  constructor(p:PostServic)\n  {\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}