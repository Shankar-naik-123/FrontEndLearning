{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/post.service\";\nimport * as i2 from \"@angular/common\";\nfunction PostsComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const post_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(post_r1.postTitle);\n  }\n}\nexport class PostsComponent {\n  /*In below example we are using angular service post.service.ts to get our postlists. so we have\n  implemented angular service but this is not the right way to do that.below are directly creating class object\n  by using new keyword this created tight coupling with angular service. instead of this way we have to perform dependency\n  injestion to overcome this tight coupling */\n  /*constructor()\n  {\n   let p=new PostService();\n   this.posts=p.PostList;\n  }*/\n  //using depency injestion\n  constructor(p) {\n    this.posts = [];\n    this.posts = p.PostT;\n  }\n}\nPostsComponent.ɵfac = function PostsComponent_Factory(t) {\n  return new (t || PostsComponent)(i0.ɵɵdirectiveInject(i1.PostService));\n};\nPostsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PostsComponent,\n  selectors: [[\"app-posts\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"]],\n  template: function PostsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"posts works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"ul\");\n      i0.ɵɵtemplate(3, PostsComponent_li_3_Template, 2, 1, \"li\", 0);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.posts);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;IAGIA,0BAA+B;IAAAA,YAAkB;IAAAA,iBAAK;;;;IAAvBA,eAAkB;IAAlBA,uCAAkB;;;ACKrD,OAAM,MAAOC,cAAc;EAGzB;;;;EAKA;;;;;EAMA;EACAC,YAAYC,CAAa;IAdzB,UAAK,GAAY,EAAE;IAgBjB,IAAI,CAACC,KAAK,GAACD,CAAC,CAACE,KAAK;EACpB;;AAlBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAK;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDR3BV,yBAAG;MAAAA,4BAAY;MAAAA,iBAAI;MAEnBA,0BAAI;MACAA,6DAAsD;MAC1DA,iBAAK;;;MADoBA,eAAQ;MAARA,mCAAQ","names":["i0","PostsComponent","constructor","p","posts","PostT","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/aahz/Angular/octacademyAngularCourse/src/app/posts/posts.component.html","/home/aahz/Angular/octacademyAngularCourse/src/app/posts/posts.component.ts"],"sourcesContent":["<p>posts works!</p>\n\n<ul>\n    <li *ngFor=\"let post of posts\">{{post.postTitle}}</li>\n</ul>\n","import { Component } from '@angular/core';\nimport { PostService } from '../Services/post.service';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css']\n})\nexport class PostsComponent {\n  posts:Array<any>=[];\n  \n  /*In below example we are using angular service post.service.ts to get our postlists. so we have \n  implemented angular service but this is not the right way to do that.below are directly creating class object \n  by using new keyword this created tight coupling with angular service. instead of this way we have to perform dependency\n  injestion to overcome this tight coupling */\n  \n  /*constructor()\n  {\n   let p=new PostService();\n   this.posts=p.PostList;\n  }*/\n\n  //using depency injestion\n  constructor(p:PostService)\n  {\n    this.posts=p.PostT\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}