{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ImplementObservableComponent {\n  constructor() {}\n  ngOnInit() {\n    //Observable\n    /*observablr is library that is from Javascript RXjs not from Angular\r\n    Its a sequence of  data that is emitted either synchronously or asynchronously over the period of time\r\n    we use $ along with observable object as naming convention below is the way how we write observable.\r\n    It is same as Javascript fucntion. we have import Observable from rxjs as we did at the top.\r\n    like how we call the function to invoke the function same way we have to use .subscribe() with observable to invoke that\r\n    without .subscribe() observable won't gets invoked.\r\n    */\n    /*const data$ = new Observable(observer => {\r\n      console.log(\"This is the message from ImplementObservableComponent observable\");\r\n    }).subscribe();*/\n    //Normal function\n    /*const func = function LogSomething() {\r\n      console.log(\"This is the message from ImplementObservableComponent function\");\r\n    }\r\n    func();*/\n    /*Above we have written void observable and function . Now we will see how to return\r\n    a value and consume that  from observable .\r\n    we use observer.next to return from observable and we can consune that return in subscribe()*/\n    /*const data$ = new Observable(observer => {\r\n       observer.next(\"This is the message1 returned from ImplementObservableComponent observable\");\r\n    }).subscribe(value=>console.log(value));\r\n          //In Normal function\r\n          const func = function LogSomething() {\r\n      return \"This is the message1 from ImplementObservableComponent function\";\r\n    }\r\n    console.log(func());\r\n    }\r\n      \r\n    }\r\n      \r\n     \r\n    }\r\n    static { this.ɵfac = function ImplementObservableComponent_Factory(t) { return new (t || ImplementObservableComponent)(); }; }\r\n    static { this.ɵcmp = /*@__PURE__*/\n    i0.ɵɵdefineComponent({\n      type: ImplementObservableComponent,\n      selectors: [[\"app-implement-observable\"]],\n      decls: 2,\n      vars: 0,\n      template: function ImplementObservableComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"implement-observable works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";AAQA,OAAM,MAAOA,4BAA4B;EACvCC,eAEA;EACAC,QAAQ;IAEN;IACA;;;;;;;IAQA;;;IAIA;IACA;;;;IAOA;;;IAIA;;;;;;;;;;;;;;;;;YA/BSF,4BAA4B;MAAAG;MAAAC;MAAAC;MAAAC;QAAA;UCRzCC,yBAAG;UAAAA,2CAA2B;UAAAA,iBAAI","names":["ImplementObservableComponent","constructor","ngOnInit","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Learnings\\Angular\\octacademyAngularCourse\\src\\app\\implement-observable\\implement-observable.component.ts","C:\\Learnings\\Angular\\octacademyAngularCourse\\src\\app\\implement-observable\\implement-observable.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-implement-observable',\r\n  templateUrl: './implement-observable.component.html',\r\n  styleUrls: ['./implement-observable.component.css']\r\n})\r\nexport class ImplementObservableComponent implements OnInit {\r\n  constructor() {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n\r\n    //Observable\r\n    /*observablr is library that is from Javascript RXjs not from Angular\r\n    Its a sequence of  data that is emitted either synchronously or asynchronously over the period of time \r\n    we use $ along with observable object as naming convention below is the way how we write observable.\r\n    It is same as Javascript fucntion. we have import Observable from rxjs as we did at the top.\r\n    like how we call the function to invoke the function same way we have to use .subscribe() with observable to invoke that \r\n    without .subscribe() observable won't gets invoked.\r\n    */\r\n\r\n    /*const data$ = new Observable(observer => {\r\n      console.log(\"This is the message from ImplementObservableComponent observable\");\r\n    }).subscribe();*/\r\n\r\n    //Normal function\r\n    /*const func = function LogSomething() {\r\n      console.log(\"This is the message from ImplementObservableComponent function\");\r\n    }\r\n    func();*/\r\n\r\n\r\n\r\n    /*Above we have written void observable and function . Now we will see how to return \r\n    a value and consume that  from observable . \r\n    we use observer.next to return from observable and we can consune that return in subscribe()*/\r\n\r\n    /*const data$ = new Observable(observer => {\r\n       observer.next(\"This is the message1 returned from ImplementObservableComponent observable\");\r\n    }).subscribe(value=>console.log(value));\r\n\r\n    //In Normal function \r\n\r\n    const func = function LogSomething() {\r\n      return \"This is the message1 from ImplementObservableComponent function\";\r\n    }\r\n    console.log(func());\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n","<p>implement-observable works!</p>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}